# Imagem base Ruby
FROM ruby:3.1.2

# Dependências de SO (ajuste se não usar wkhtmltopdf/imagemagick)
RUN apt-get update -qq && apt-get install -y \
    build-essential \
    libpq-dev \
    nodejs \
    npm \
    imagemagick \
    libmagickwand-dev \
    wkhtmltopdf \
    fonts-dejavu \
    fonts-liberation \
    fonts-noto-color-emoji \
    xfonts-75dpi xfonts-base \
    && rm -rf /var/lib/apt/lists/*

# Diretório de trabalho
WORKDIR /app

# ===== Bundler (cache friendly) =====
# Copia manifestos Ruby primeiro pra aproveitar cache
COPY Gemfile Gemfile.lock ./

# Controla ambiente via ARG (padrão: development)
ARG RAILS_ENV=development
ENV RAILS_ENV=$RAILS_ENV

# Em produção, pula gems de dev/test; em dev, instala tudo
RUN if [ "$RAILS_ENV" = "production" ]; then \
      bundle config set --local without 'development test'; \
    else \
      bundle config unset without || true; \
    fi && \
    bundle install

# ===== Node (npm) =====
# Use somente npm (sem yarn). Copie APENAS package*.json
COPY package*.json ./

# Instala dependências JS de forma determinística se houver lockfile
RUN if [ -f package-lock.json ]; then \
      npm ci --no-audit --no-fund; \
    else \
      npm install --no-audit --no-fund; \
    fi

# ===== Código da aplicação =====
COPY . .

# Precompile de assets **somente** em produção
RUN if [ "$RAILS_ENV" = "production" ]; then \
      bundle exec rails assets:precompile; \
    fi

# Pastas necessárias (evita erro do pid/log)
RUN mkdir -p log tmp/pids tmp/cache tmp/sockets && \
    chmod -R 0775 log tmp

# Porta padrão do Rails
EXPOSE 3000

# Entrypoint (remove server.pid etc.)
COPY entrypoint.sh /usr/bin/
RUN chmod +x /usr/bin/entrypoint.sh
ENTRYPOINT ["entrypoint.sh"]

# Comando padrão
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]
